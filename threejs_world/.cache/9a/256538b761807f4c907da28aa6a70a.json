{"id":"cubemap_test.html","dependencies":[{"name":"./main.css","dynamic":true,"resolved":"/Users/dezbookpro/Documents/jakes_docs/ITP/Fall_2020/liveweb/tvland3d/main.css","parent":"/Users/dezbookpro/Documents/jakes_docs/ITP/Fall_2020/liveweb/tvland3d/cubemap_test.html"}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<title>three.js webgl - materials - cube reflection / refraction [Walt]</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"/4abed1c996f46e1b2ad61757af46ece4.css\">\n\t</head>\n\t<body>\n\n\t\t<div id=\"container\"></div>\n\t\t<div id=\"info\">\n\t\t\t<a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - cube mapping demo.<br>\n\t\t\tTexture by <a href=\"http://www.humus.name/index.php?page=Textures\" target=\"_blank\" rel=\"noopener\">Humus</a>, Walt Disney head by <a href=\"http://davidoreilly.com/post/18087489343/disneyhead\" target=\"_blank\" rel=\"noopener\">David OReilly</a>\n\t\t</div>\n\n\t\t<script type=\"module\">\n\n\t\t\timport * as THREE from '../build/three.module.js';\n\t\t\t// import * as THREE from './three';\n\t\t\t// import * as THREE from \"../build\"\n\n\t\t\timport Stats from './jsm/libs/stats.module.js';\n\n\t\t\timport { OrbitControls } from './jsm/controls/OrbitControls.js';\n\t\t\timport { OBJLoader } from './jsm/loaders/OBJLoader.js';\n\n\t\t\tlet container, stats;\n\n\t\t\tlet camera, scene, renderer;\n\n\t\t\tlet pointLight;\n\n\t\t\tinit();\n\t\t\tanimate();\n\n\t\t\tfunction init() {\n\n\t\t\t\tcontainer = document.createElement( 'div' );\n\t\t\t\tdocument.body.appendChild( container );\n\n\t\t\t\tcamera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 5000 );\n\t\t\t\tcamera.position.z = 2000;\n\n\t\t\t\t//cubemap\n\t\t\t\tconst path = 'space_cubemap/';\n\t\t\t\tconst format = '.png';\n\t\t\t\tconst urls = [\n\t\t\t\t\tpath + 'px' + format, path + 'nx' + format,\n\t\t\t\t\tpath + 'py' + format, path + 'ny' + format,\n\t\t\t\t\tpath + 'pz' + format, path + 'nz' + format\n\t\t\t\t];\n\n\t\t\t\tconst reflectionCube = new THREE.CubeTextureLoader().load( urls );\n\t\t\t\tconst refractionCube = new THREE.CubeTextureLoader().load( urls );\n\t\t\t\trefractionCube.mapping = THREE.CubeRefractionMapping;\n\n\t\t\t\tscene = new THREE.Scene();\n\t\t\t\tscene.background = reflectionCube;\n\n\t\t\t\t//lights\n\t\t\t\tconst ambient = new THREE.AmbientLight( 0xffffff );\n\t\t\t\tscene.add( ambient );\n\n\t\t\t\tpointLight = new THREE.PointLight( 0xffffff, 2 );\n\t\t\t\tscene.add( pointLight );\n\n\t\t\t\t//materials\n\t\t\t\tconst cubeMaterial3 = new THREE.MeshLambertMaterial( { color: 0xff6600, envMap: reflectionCube, combine: THREE.MixOperation, reflectivity: 0.3 } );\n\t\t\t\tconst cubeMaterial2 = new THREE.MeshLambertMaterial( { color: 0xffee00, envMap: refractionCube, refractionRatio: 0.95 } );\n\t\t\t\tconst cubeMaterial1 = new THREE.MeshLambertMaterial( { color: 0xffffff, envMap: reflectionCube } );\n\n\t\t\t\t//models\n\t\t\t\tconst objLoader = new OBJLoader();\n\n\t\t\t\tobjLoader.setPath( 'models/obj/walt/' );\n\t\t\t\tobjLoader.load( 'WaltHead.obj', function ( object ) {\n\n\t\t\t\t\tconst head = object.children[ 0 ];\n\n\t\t\t\t\thead.scale.multiplyScalar( 15 );\n\t\t\t\t\thead.position.y = - 500;\n\t\t\t\t\thead.material = cubeMaterial1;\n\n\t\t\t\t\tconst head2 = head.clone();\n\t\t\t\t\thead2.position.x = - 900;\n\t\t\t\t\thead2.material = cubeMaterial2;\n\n\t\t\t\t\tconst head3 = head.clone();\n\t\t\t\t\thead3.position.x = 900;\n\t\t\t\t\thead3.material = cubeMaterial3;\n\n\t\t\t\t\tscene.add( head, head2, head3 );\n\n\t\t\t\t} );\n\n\t\t\t\t//renderer\n\t\t\t\trenderer = new THREE.WebGLRenderer();\n\t\t\t\trenderer.setPixelRatio( window.devicePixelRatio );\n\t\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\t\t\tcontainer.appendChild( renderer.domElement );\n\n\t\t\t\t//controls\n\t\t\t\tconst controls = new OrbitControls( camera, renderer.domElement );\n\t\t\t\tcontrols.enableZoom = false;\n\t\t\t\tcontrols.enablePan = false;\n\t\t\t\tcontrols.minPolarAngle = Math.PI / 4;\n\t\t\t\tcontrols.maxPolarAngle = Math.PI / 1.5;\n\n\t\t\t\t//stats\n\t\t\t\tstats = new Stats();\n\t\t\t\tcontainer.appendChild( stats.dom );\n\n\t\t\t\twindow.addEventListener( 'resize', onWindowResize, false );\n\n\t\t\t}\n\n\t\t\tfunction onWindowResize() {\n\n\t\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t\t\t}\n\n\t\t\tfunction animate() {\n\n\t\t\t\trequestAnimationFrame( animate );\n\t\t\t\trender();\n\n\t\t\t}\n\n\t\t\tfunction render() {\n\n\t\t\t\trenderer.render( scene, camera );\n\t\t\t\tstats.update();\n\n\t\t\t}\n\n\t\t</script>\n\n\t</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"f88eb5db2ac784fd7a07e7a13529215d","cacheData":{}}